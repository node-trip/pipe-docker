#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root
if [ "$EUID" -ne 0 ]; then 
    echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sudo)"
    exit 1
fi

# –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
chmod 755 "$0"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
LOG_FILE="/var/log/pipe_testnet_docker.log"
BACKUP_DIR="/root/pipe_node_backup"
DOCKER_CONFIG_DIR="/root/pipe_docker_config"
DOCKER_CONTAINER_NAME="pipe-network-testnet"
DOCKER_VOLUME_NAME="pipe-network-data"

# –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω
node_prefixes=("Pipe" "Validator" "Cosmos" "Galaxy" "Orbit" "Stellar" "Space" "Crypto" "Block" "Digital" "Cyber" "Network" "Quantum" "Tech" "Cloud")
node_suffixes=("Node" "Point" "Validator" "Hub" "Station" "Portal" "Gateway" "Edge" "Server" "Relay" "Bridge")
node_adjectives=("Fast" "Stable" "Secure" "Power" "Main" "Prime" "Core" "Ultra" "Mega" "Super" "Hyper" "Smart")

random_names=(
    "Alex" "Maria" "Dmitry" "Elena" "Ivan" "Olga" "Sergey" "Anna" "Pavel" "Natalia"
    "Michael" "Ekaterina" "Andrey" "Svetlana" "Nikolay" "Tatiana" "Vladimir" "Julia" "Alexey" "Victoria"
    "Denis" "Irina" "Anton" "Yulia" "Roman" "Sofia" "Maxim" "Anastasia" "Artem" "Daria"
    "Evgeny" "Polina" "Ilya" "Marina" "Oleg" "Ksenia" "Kirill" "Alina" "Nikita" "Christina"
    "Mikhail" "Valentina" "Danila" "Kate" "Gregory" "Vera" "Victor" "Veronika" "Ruslan" "Elizaveta"
    "Igor" "Vasilisa" "Arthur" "Sofia" "Leonid" "Diana" "Eduard" "Alena" "Vadim" "Yana"
    "Mark" "Eva" "Timur" "Kristina" "Fedor" "Alexandra" "George" "Kira" "Boris" "Varvara"
    "Semyon" "Ada" "Yaroslav" "Angelina" "Matvey" "Ulyana" "Philip" "Antonina" "Lev" "Tamara"
    "Bogdan" "Emilia" "Stanislav" "Miroslava" "Arseniy" "Regina" "Egor" "Karina" "Peter" "Milana"
    "John" "Sarah" "David" "Emma" "Robert" "Olivia" "William" "Ava" "Richard" "Sophia"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$LOG_FILE"
    echo -e "$message"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
show_menu() {
    clear
    echo -e "${BLUE}=== Pipe Network Testnet Docker - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–æ–π ===${NC}"
    echo -e "${GREEN}–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram –∫–∞–Ω–∞–ª—É: ${BLUE}@nodetrip${NC}"
    echo -e "${GREEN}–ì–∞–π–¥—ã –ø–æ –Ω–æ–¥–∞–º, –Ω–æ–≤–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–º–æ—â—å${NC}"
    echo "------------------------------------------------"
    echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Testnet –≤ Docker"
    echo "2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–¥—ã Docker"
    echo "3. –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É Docker"
    echo "4. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–æ–¥—ã"
    echo "5. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "6. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "7. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Devnet (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞)"
    echo "0. –í—ã—Ö–æ–¥"
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        echo -e "${BLUE}=== –õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ===${NC}"
        cat "$LOG_FILE"
        echo
        echo -e "${BLUE}–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ: $LOG_FILE${NC}"
    else
        echo -e "${RED}–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
show_container_logs() {
    if docker ps -a | grep -q "$DOCKER_CONTAINER_NAME"; then
        echo -e "${BLUE}=== –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Pipe Network Testnet ===${NC}"
        docker logs "$DOCKER_CONTAINER_NAME"
    else
        echo -e "${RED}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $DOCKER_CONTAINER_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã devnet
stop_devnet_node() {
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–¥—ã Devnet...${NC}"

    if systemctl is-active --quiet pop.service; then
        echo -e "${YELLOW}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—É Pipe Network Devnet...${NC}"
        systemctl stop pop.service
        systemctl disable pop.service
        echo -e "${GREEN}–ù–æ–¥–∞ Pipe Network Devnet –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞${NC}"
    else
        echo -e "${BLUE}–ê–∫—Ç–∏–≤–Ω–∞—è –Ω–æ–¥–∞ Pipe Network Devnet –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å pipe-pop –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if systemctl is-active --quiet pipe-pop.service; then
        echo -e "${YELLOW}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –Ω–æ–¥—É Pipe Network Devnet...${NC}"
        systemctl stop pipe-pop.service
        systemctl disable pipe-pop.service
        echo -e "${GREEN}–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –Ω–æ–¥–∞ Pipe Network Devnet –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ —Å–µ—Ä–≤–∏—Å popcache
    if systemctl is-active --quiet popcache.service; then
        echo -e "${YELLOW}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å popcache...${NC}"
        systemctl stop popcache.service
        systemctl disable popcache.service
        echo -e "${GREEN}–°–µ—Ä–≤–∏—Å popcache –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–∫–ª—é—á–µ–Ω${NC}"
    fi

    read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Docker
install_docker_node() {
    log_message "${GREEN}–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–¥—ã Pipe Network Testnet —á–µ—Ä–µ–∑ Docker...${NC}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${YELLOW}Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...${NC}"
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        systemctl enable docker
        systemctl start docker
    else
        echo -e "${GREEN}Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
    fi

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    mkdir -p "$DOCKER_CONFIG_DIR"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –Ω–æ–¥—ã
    prefix_index=$((RANDOM % ${#node_prefixes[@]}))
    suffix_index=$((RANDOM % ${#node_suffixes[@]}))
    adj_index=$((RANDOM % ${#node_adjectives[@]}))
    
    # 50% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ
    if [[ $((RANDOM % 2)) -eq 0 ]]; then
        node_name="${node_adjectives[$adj_index]}${node_prefixes[$prefix_index]}${node_suffixes[$suffix_index]}"
    else
        node_name="${node_prefixes[$prefix_index]}${node_suffixes[$suffix_index]}"
    fi
    
    # 40% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å 2-3 —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ
    if [[ $((RANDOM % 5)) -lt 2 ]]; then
        random_digits=$((RANDOM % 900 + 100))
        node_name="${node_name}${random_digits}"
    fi
    
    echo -e "${GREEN}–ò–º—è –Ω–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $node_name${NC}"
    
    # –ò–º—è POP —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –Ω–æ–¥—ã
    pop_name="$node_name"
    echo -e "${GREEN}–ò–º—è POP-–Ω–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $pop_name${NC}"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    random_index=$((RANDOM % ${#random_names[@]}))
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –±–µ–∑ —Ö–µ—à–∞, –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—è —Å–ª—É—á–∞–π–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
    if [[ $((RANDOM % 3)) -eq 0 ]]; then
        # 33% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
        suffixes=("dev" "validator" "node" "crypto" "web3" "defi" "tech" "pro" "net" "sys")
        suffix_index=$((RANDOM % ${#suffixes[@]}))
        user_name="${random_names[$random_index]}_${suffixes[$suffix_index]}"
    else
        # –í–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É-–¥–≤–µ —Ü–∏—Ñ—Ä—ã (30% —à–∞–Ω—Å)
        if [[ $((RANDOM % 10)) -lt 3 ]]; then
            random_digit=$((RANDOM % 99 + 1))
            user_name="${random_names[$random_index]}${random_digit}"
        else
            user_name="${random_names[$random_index]}"
        fi
    fi
    
    echo -e "${GREEN}–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $user_name${NC}"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    echo -e "${BLUE}–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º jq, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if ! command -v jq &> /dev/null; then
        apt install -y jq
    fi
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ IP
    auto_location=$(curl -s https://ipinfo.io/json | jq -r '.region + ", " + .country')
    echo -e "${GREEN}üåç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $auto_location${NC}"
    
    read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ? (y/n): " use_auto_location
    
    if [[ $use_auto_location == "y" || $use_auto_location == "Y" ]]; then
        pop_location="$auto_location"
    else
        read -p "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–¥—ã (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞): " pop_location
    fi
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo -e "${BLUE}–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ—Å—Ç–∞–≤—à–µ–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π${NC}"
    echo
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞: " invite_code
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: " email
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ–±-—Å–∞–π—Ç (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " website
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " discord
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ Telegram (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " telegram
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Solana (–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞): " solana_pubkey

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    memory_cache_size=4096
    echo -e "${GREEN}–†–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${memory_cache_size} –ú–ë${NC}"

    disk_cache_size=100
    echo -e "${GREEN}–†–∞–∑–º–µ—Ä –¥–∏—Å–∫–æ–≤–æ–≥–æ –∫—ç—à–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${disk_cache_size} –ì–ë${NC}"

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    echo -e "${GREEN}–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª...${NC}"
    cat > "$DOCKER_CONFIG_DIR/config.json" << EOL
{
  "pop_name": "$pop_name",
  "pop_location": "$pop_location",
  "invite_code": "$invite_code",
  "server": {
    "host": "0.0.0.0",
    "port": 443,
    "http_port": 80,
    "workers": 40
  },
  "cache_config": {
    "memory_cache_size_mb": $memory_cache_size,
    "disk_cache_path": "./cache",
    "disk_cache_size_gb": $disk_cache_size,
    "default_ttl_seconds": 86400,
    "respect_origin_headers": true,
    "max_cacheable_size_mb": 1024
  },
  "api_endpoints": {
    "base_url": "https://dataplane.pipenetwork.com"
  },
  "identity_config": {
    "node_name": "$node_name",
    "name": "$user_name",
    "email": "$email",
    "website": "$website",
    "discord": "$discord",
    "telegram": "$telegram",
    "solana_pubkey": "$solana_pubkey"
  }
}
EOL

    # –°–æ–∑–¥–∞–µ–º Docker volume –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞
    echo -e "${GREEN}–°–æ–∑–¥–∞–µ–º Docker volume –¥–ª—è –¥–∞–Ω–Ω—ã—Ö...${NC}"
    docker volume create "$DOCKER_VOLUME_NAME"

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –µ—Å—Ç—å
    if docker ps -a | grep -q "$DOCKER_CONTAINER_NAME"; then
        echo -e "${YELLOW}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...${NC}"
        docker stop "$DOCKER_CONTAINER_NAME" >/dev/null 2>&1
        docker rm "$DOCKER_CONTAINER_NAME" >/dev/null 2>&1
    fi

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç—ã –≤ —Ñ–∞–µ—Ä–≤–æ–ª–µ
    if command -v ufw &> /dev/null; then
        echo -e "${BLUE}–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç—ã –≤ —Ñ–∞–µ—Ä–≤–æ–ª–µ...${NC}"
        ufw allow 80/tcp
        ufw allow 443/tcp
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Docker (–∏—Å–ø–æ–ª—å–∑—É—è Ubuntu 22.04 –≤–º–µ—Å—Ç–æ 24.04)
    echo -e "${GREEN}–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Docker —Å –Ω–æ–¥–æ–π Pipe Network...${NC}"
    docker run -d \
        --name "$DOCKER_CONTAINER_NAME" \
        --restart always \
        -p 80:80 \
        -p 443:443 \
        -v "$DOCKER_CONFIG_DIR/config.json:/opt/popcache/config.json" \
        -v "$DOCKER_VOLUME_NAME:/opt/popcache/cache" \
        -e POP_CONFIG_PATH=/opt/popcache/config.json \
        --pull always \
        ubuntu:24.04 /bin/bash -c \
        "apt-get update && \
         apt-get install -y curl wget tar && \
         mkdir -p /opt/popcache/logs && \
         cd /opt/popcache && \
         wget https://download.pipe.network/static/pop-v0.3.0-linux-x64.tar.gz && \
         tar -xzf pop-v0.3.0-linux-*.tar.gz && \
         chmod 755 /opt/popcache/pop && \
         /opt/popcache/pop"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ
    sleep 5
    if docker ps | grep -q "$DOCKER_CONTAINER_NAME"; then
        echo -e "${GREEN}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!${NC}"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–æ–¥—ã
        if ! curl -sk "http://localhost/health" | grep -q "status.*ok"; then
            echo -e "${YELLOW}–ù–æ–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.${NC}"
            echo -e "${BLUE}–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...${NC}"
            sleep 10
            echo -e "${BLUE}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...${NC}"
            docker restart "$DOCKER_CONTAINER_NAME" > /dev/null
            echo -e "${GREEN}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.${NC}"
            echo -e "${YELLOW}–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã (20 —Å–µ–∫—É–Ω–¥)...${NC}"
            sleep 20
        else
            echo -e "${GREEN}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.${NC}"
        fi
        
        echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–æ–¥—ã:${NC}"
        echo -e "${YELLOW}–°–æ—Å—Ç–æ—è–Ω–∏–µ: http://$(hostname -I | awk '{print $1}')/state${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://$(hostname -I | awk '{print $1}')/health${NC}"
        echo -e "${GREEN}–ù–æ–¥–∞ Pipe Network Testnet —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Docker!${NC}"
    else
        echo -e "${RED}–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Docker.${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker logs $DOCKER_CONTAINER_NAME${NC}"
    fi

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    mkdir -p "$BACKUP_DIR"
    cp -r "$DOCKER_CONFIG_DIR" "$BACKUP_DIR"
    echo -e "${BLUE}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $BACKUP_DIR${NC}"

    read -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..." -n1 -s
    clear
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥—ã –≤ Docker
monitor_docker_node() {
    if ! docker ps | grep -q "$DOCKER_CONTAINER_NAME"; then
        echo -e "${RED}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $DOCKER_CONTAINER_NAME –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
        return
    fi

    clear
    echo -e "${BLUE}=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–¥—ã Pipe Network –≤ Docker ===${NC}"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    echo -e "${YELLOW}–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"
    docker ps --filter "name=$DOCKER_CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    echo
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    SERVER_IP=$(hostname -I | awk '{print $1}')
    
    echo -e "${BLUE}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:${NC}"
    echo -e "${YELLOW}1. –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–¥—ã: http://$SERVER_IP/state${NC}"
    echo -e "${YELLOW}2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://$SERVER_IP/health${NC}"
    echo

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ curl –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    echo -e "${GREEN}–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...${NC}"
    if command -v curl &> /dev/null; then
        echo "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–¥—ã:"
        curl -s "http://$SERVER_IP/state" || echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ${NC}"
        echo
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:"
        curl -s "http://$SERVER_IP/health" || echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è${NC}"
    else
        echo -e "${RED}–£—Ç–∏–ª–∏—Ç–∞ curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: apt install curl${NC}"
    fi

    echo
    echo -e "${BLUE}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º:${NC}"
    docker stats --no-stream "$DOCKER_CONTAINER_NAME"
    
    read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã Docker
remove_docker_node() {
    echo -e "${RED}–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É Pipe Network –∏–∑ Docker!${NC}"
    echo -e "${YELLOW}–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —É–¥–∞–ª–∏—Ç –µ–≥–æ –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.${NC}"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " choice
    
    if [[ $choice != "y" && $choice != "Y" ]]; then
        echo -e "${BLUE}–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.${NC}"
        read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
        return
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if docker ps -a | grep -q "$DOCKER_CONTAINER_NAME"; then
        echo -e "${YELLOW}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...${NC}"
        docker stop "$DOCKER_CONTAINER_NAME" >/dev/null 2>&1
        docker rm "$DOCKER_CONTAINER_NAME" >/dev/null 2>&1
        log_message "${GREEN}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Pipe Network Testnet –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω${NC}"
    else
        echo -e "${BLUE}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $DOCKER_CONTAINER_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ volume
    read -p "–£–¥–∞–ª–∏—Ç—å Docker volume —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–¥—ã? (y/n): " volume_choice
    if [[ $volume_choice == "y" || $volume_choice == "Y" ]]; then
        if docker volume ls | grep -q "$DOCKER_VOLUME_NAME"; then
            docker volume rm "$DOCKER_VOLUME_NAME" >/dev/null 2>&1
            log_message "${GREEN}Volume $DOCKER_VOLUME_NAME —É–¥–∞–ª–µ–Ω${NC}"
        fi
    else
        echo -e "${BLUE}Docker volume $DOCKER_VOLUME_NAME —Å–æ—Ö—Ä–∞–Ω–µ–Ω${NC}"
    fi
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    read -p "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã? (y/n): " config_choice
    if [[ $config_choice == "y" || $config_choice == "Y" ]]; then
        if [ -d "$DOCKER_CONFIG_DIR" ]; then
            rm -rf "$DOCKER_CONFIG_DIR"
            log_message "${GREEN}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $DOCKER_CONFIG_DIR —É–¥–∞–ª–µ–Ω–∞${NC}"
        fi
    else
        echo -e "${BLUE}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ $DOCKER_CONFIG_DIR —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã${NC}"
    fi
    
    echo -e "${GREEN}–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Pipe Network Testnet –∏–∑ Docker –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
    read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–¥—ã
backup_docker_node() {
    echo -e "${BLUE}=== –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–¥—ã Pipe Network –≤ Docker ===${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if [ -f "$DOCKER_CONFIG_DIR/config.json" ]; then
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
        BACKUP_PATH="$BACKUP_DIR/pipe_docker_backup_$BACKUP_DATE"
        mkdir -p "$BACKUP_PATH"
        
        echo -e "${YELLOW}–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
        cp -r "$DOCKER_CONFIG_DIR/config.json" "$BACKUP_PATH/"
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ Docker volume
        if docker ps | grep -q "$DOCKER_CONTAINER_NAME"; then
            echo -e "${YELLOW}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö...${NC}"
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            docker run --rm -v "$DOCKER_VOLUME_NAME:/data" -v "$BACKUP_PATH:/backup" ubuntu:24.04 \
                bash -c "cd /data && tar czf /backup/pipe_data.tar.gz ."
            
            if [ -f "$BACKUP_PATH/pipe_data.tar.gz" ]; then
                echo -e "${GREEN}–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ $BACKUP_PATH/pipe_data.tar.gz${NC}"
                log_message "–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö Docker –Ω–æ–¥—ã –≤ $BACKUP_PATH"
            else
                echo -e "${RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö${NC}"
            fi
        else
            echo -e "${YELLOW}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.${NC}"
        fi
        
        echo -e "${GREEN}–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ $BACKUP_PATH${NC}"
    else
        echo -e "${RED}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ $DOCKER_CONFIG_DIR/config.json${NC}"
    fi
    
    read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
while true; do
    show_menu
    read -r choice
    case $choice in
        1) install_docker_node ;;
        2) monitor_docker_node ;;
        3) remove_docker_node ;;
        4) backup_docker_node ;;
        5) show_logs ;;
        6) show_container_logs ;;
        7) stop_devnet_node ;;
        0) exit 0 ;;
        *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}" ;;
    esac
done
